show databases;
create database shop;
use shop;
select database();
create table customers (
id int auto_increment primary key,
first_name varchar(100),
last_name varchar(100),
email varchar(100)); 

create table orders (
id int auto_increment primary key,
order_date date,
amount decimal(8,2),
customer_id int,
Foreign key (customer_id) references customers(id)
)
drop table customers
desc orders
INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');
       
INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5);
select * from orders;

INNER JOIN
select first_name,last_name,order_date,amount from customers 
join orders 
on customers.id = orders.customer_id;

INNER JOIN using group by
select first_name,last_name,SUM(amount) as total from customers 
join orders 
on customers.id = orders.customer_id
group by first_name,last_name order by total desc;

LEFT JOIN
select first_name,last_name,order_date,amount from customers 
left join orders 
on customers.id = orders.customer_id;

LEFT JOIN using group by
select first_name,last_name,SUM(amount) as total from customers 
left join orders 
on customers.id = orders.customer_id
group by first_name,last_name order by total desc;

LEFT JOIN using group by, using ifnull()
select first_name,last_name,ifnull(sum(amount),0) as total from customers 
left join orders 
on customers.id = orders.customer_id
group by first_name,last_name order by total desc;

select first_name,last_name,order_date,amount from orders 
join customers 
on customers.id = orders.customer_id;

RIGHT JOIN 
insert into orders(order_date,amount) values(current_date(),'234');
select first_name, last_name, order_date, amount from customers 
right join orders 
on customers.id = orders.customer_id;

ON DELETE CASCADE
delete from customers where last_name = 'George';
drop table orders;
drop table customers;

create table customers (
id int auto_increment primary key,
first_name varchar(100),
last_name varchar(100),
email varchar(100)); 

create table orders (
id int auto_increment primary key,
order_date date,
amount decimal(8,2),
customer_id int,
Foreign key (customer_id) references customers(id) on delete cascade
)

INSERT INTO customers (first_name, last_name, email) 
VALUES ('Boy', 'George', 'george@gmail.com'),
       ('George', 'Michael', 'gm@gmail.com'),
       ('David', 'Bowie', 'david@gmail.com'),
       ('Blue', 'Steele', 'blue@gmail.com'),
       ('Bette', 'Davis', 'bette@aol.com');

INSERT INTO orders (order_date, amount, customer_id)
VALUES ('2016/02/10', 99.99, 1),
       ('2017/11/11', 35.50, 1),
       ('2014/12/12', 800.67, 2),
       ('2015/01/03', 12.50, 2),
       ('1999/04/11', 450.25, 5);

delete from customers where last_name = 'George';


MANY TO MANY relationship
show databases;
create database series_ratingdb;
drop table reviewers

CREATE TABLE reviewers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL
);

CREATE TABLE series(
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100),
    released_year year,
    genre VARCHAR(100)
);

CREATE TABLE reviews (
    id INT AUTO_INCREMENT PRIMARY KEY,
    rating DECIMAL(2,1),
    series_id INT,
    reviewer_id INT,
    FOREIGN KEY(series_id) REFERENCES series(id),
    FOREIGN KEY(reviewer_id) REFERENCES reviewers(id)
);

INSERT INTO series (title, released_year, genre) VALUES
    ('Archer', 2009, 'Animation'),
    ('Arrested Development', 2003, 'Comedy'),
    ("Bob's Burgers", 2011, 'Animation'),
    ('Bojack Horseman', 2014, 'Animation'),
    ("Breaking Bad", 2008, 'Drama'),
    ('Curb Your Enthusiasm', 2000, 'Comedy'),
    ("Fargo", 2014, 'Drama'),
    ('Freaks and Geeks', 1999, 'Comedy'),
    ('General Hospital', 1963, 'Drama'),
    ('Halt and Catch Fire', 2014, 'Drama'),
    ('Malcolm In The Middle', 2000, 'Comedy'),
    ('Pushing Daisies', 2007, 'Comedy'),
    ('Seinfeld', 1989, 'Comedy'),
    ('Stranger Things', 2016, 'Drama');

INSERT INTO reviewers (first_name, last_name) VALUES
    ('Thomas', 'Stoneman'),
    ('Wyatt', 'Skaggs'),
    ('Kimbra', 'Masters'),
    ('Domingo', 'Cortes'),
    ('Colt', 'Steele'),
    ('Pinkie', 'Petit'),
    ('Marlon', 'Crafford');

INSERT INTO reviews(series_id, reviewer_id, rating) VALUES
    (1,1,8.0),(1,2,7.5),(1,3,8.5),(1,4,7.7),(1,5,8.9),
    (2,1,8.1),(2,4,6.0),(2,3,8.0),(2,6,8.4),(2,5,9.9),
    (3,1,7.0),(3,6,7.5),(3,4,8.0),(3,3,7.1),(3,5,8.0),
    (4,1,7.5),(4,3,7.8),(4,4,8.3),(4,2,7.6),(4,5,8.5),
    (5,1,9.5),(5,3,9.0),(5,4,9.1),(5,2,9.3),(5,5,9.9),
    (6,2,6.5),(6,3,7.8),(6,4,8.8),(6,2,8.4),(6,5,9.1),
    (7,2,9.1),(7,5,9.7),
    (8,4,8.5),(8,2,7.8),(8,6,8.8),(8,5,9.3),
    (9,2,5.5),(9,3,6.8),(9,4,5.8),(9,6,4.3),(9,5,4.5),
    (10,5,9.9),
    (13,3,8.0),(13,4,7.2),
    (14,2,8.5),(14,3,8.9),(14,4,8.9);
select * from reviews
# CHALLENGE 1
select title, rating from series join reviews on series.id = reviews.series_id;
# CHALLENGE 2
select title , round(avg(rating),2) as avg_rating from series 
join reviews 
on series.id = reviews.series_id 
group by title
order by avg_rating;
# CHALLENGE 3
select first_name, last_name, rating from reviewers join reviews on reviewers.id = reviews.reviewer_id;
# CHALLENGE 4
select title as unreviewed_series from series left join reviews on series.id = reviews.series_id where rating is null;
# CHALLENGE 5
select genre, round(avg(rating),2) as avg_rating from series join reviews on series.id = reviews.series_id group by genre;
# CHALLENGE 6
select first_name, last_name, count(rating) as count,
ifnull(min(rating),0) as min_rating,
ifnull(max(rating),0) as max_rating,
round(ifnull(avg(rating),0),2) as avg_rating,
case
when count(rating) > 1 then 'ACTIVE'
else 'INACTIVE'
end as 'STATUS'
from reviewers left join reviews on reviewers.id = reviews.reviewer_id
group by first_name, last_name;
# CHALLENGE 7
select title, rating , concat(first_name,' ',last_name) as full_name from reviews 
join series on series.id = reviews.series_id
join reviewers on reviewers.id = reviews.reviewer_id
order by full_name;

WINDOWS functions are different but looks important